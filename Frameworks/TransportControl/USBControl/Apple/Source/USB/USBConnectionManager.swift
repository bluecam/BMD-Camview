/* -LICENSE-START-
 ** Copyright (c) 2020 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation
import Utility
import PTP

public let kBlackmagicDesignVendorID: UInt16 = 0x1edb;

public protocol USBConnectionManagerDelegate: AnyObject {
	func updateDiscoveredUSBPTPDevices(_ usbPTPDevices: [USBBulkDevice])
	func connectedToUSBDevice(_ device: USBBulkDevice)
	func disconnectedFromUSBDevice()
}

public class USBConnectionManager: NSObject {	
    // Properties
	var m_usbDeviceNotifier = USBDeviceNotifier()
    var m_discoveredUSBPTPDevices = [USBBulkDevice]()
    var m_USBConnectionManagerDelegate: USBConnectionManagerDelegate?
	var m_connectedDevice: USBBulkDevice?
	
	public override init() {
		super.init()
		
		// Register to be an observer to USB device connected notification
		NotificationCenter.default.addObserver(self, selector: #selector(onUSBDeviceConnected(_:)), name: .USBDeviceConnected, object: nil)
		
		// Register to be an observer to USB device disconnected notification
		NotificationCenter.default.addObserver(self, selector: #selector(onUSBDeviceDisconnected(_:)), name: .USBDeviceDisconnected, object: nil)

		// Filter to get notifications only of Blackmagic Design USB devices with PTP support
		m_usbDeviceNotifier.addFilterVendorId(kBlackmagicDesignVendorID)
		m_usbDeviceNotifier.addFilterInterface(interfaceClass: PTPTypes.kUSBInterfaceClass, interfaceSubClass: PTPTypes.kUSBInterfaceSubClass)
		m_usbDeviceNotifier.start()
    }
	
	public func setDelegate(_ delegate: USBConnectionManagerDelegate) {
		m_USBConnectionManagerDelegate = delegate
	}
	
	@discardableResult public func openDevice(device: USBBulkDevice) -> Bool {
		if (m_connectedDevice == nil) {
			if (device.open()) {
				m_connectedDevice = device
				m_USBConnectionManagerDelegate?.connectedToUSBDevice(device)
				
				Logger.LogWithInfo("Connected to device \"\(device.getName())")
				return true
			}
		}
		
		return false
	}
	
	public func closeDevice() {
		m_connectedDevice!.close()
		m_connectedDevice = nil
		DispatchQueue.main.async {
			self.m_USBConnectionManagerDelegate?.disconnectedFromUSBDevice()
		}
	}
	
	public func getDiscoveredUSBPTPDevices() -> [USBBulkDevice] {
		return m_discoveredUSBPTPDevices
	}
	
	private func informDiscoveredUSBPTPDevices() {
		DispatchQueue.main.async {
			self.m_USBConnectionManagerDelegate?.updateDiscoveredUSBPTPDevices(self.m_discoveredUSBPTPDevices)
			
			let index = self.m_discoveredUSBPTPDevices.firstIndex(where: { $0.getId() == self.m_connectedDevice?.getId() })
			if index == nil {
				self.m_connectedDevice = nil
				self.m_USBConnectionManagerDelegate?.disconnectedFromUSBDevice()
			}
		}
	}
	
	//=======================================================
	// Notification Center
	//=======================================================
	@objc func onUSBDeviceConnected(_ notification: Notification) {
		if let data = notification.userInfo as? [String: USBBulkDevice] {
			for (_, device) in data {
				print("Device Added: ID: \(device.getId()) Name: \(String(device.getName()))")
				
				if (!m_discoveredUSBPTPDevices.contains(device)) {
					m_discoveredUSBPTPDevices.append(device)
				}
				
				informDiscoveredUSBPTPDevices()
			}
		}
	}
	
	@objc func onUSBDeviceDisconnected(_ notification: Notification) {
		if let data = notification.userInfo as? [String: UInt64] {
			for (_, deviceId) in data {
				print("Device Removed: ID: \(deviceId)")
				
				if (m_connectedDevice?.getId() == deviceId) {
					closeDevice()
				}
				
				let devicesRemainConnected = m_discoveredUSBPTPDevices.filter { $0.getId() != deviceId }
				m_discoveredUSBPTPDevices = devicesRemainConnected
				
				informDiscoveredUSBPTPDevices()
			}
		}
	}
}
