/* -LICENSE-START-
 ** Copyright (c) 2020 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation
import Utility

public protocol PTPPacketEncoderDelegate: AnyObject {
	func onPTPPacketEncoded(_ container: Container, _ dataContainer: Container?) -> Bool
}

public class PTPPacketEncoder {
    weak var m_ptpPacketEncoderDelegate: PTPPacketEncoderDelegate?

	public init() {}
	
	public func setDelegate(_ delegate: PTPPacketEncoderDelegate) {
		m_ptpPacketEncoderDelegate = delegate
	}
	
	public func encodeOpenSessionCommand(_ transactionId: UInt32, _ sessionId: UInt8) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.OpenSession.rawValue
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(sessionId)

		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeCloseSessionCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.CloseSession.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	// Get device info is allowed to be called without a session
	public func encodeGetDeviceInfoCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.GetDeviceInfo.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeGetDevicePropDescCommand(_ transactionId: UInt32, _ devicePropCode: DevicePropCode) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.GetDevicePropDesc.rawValue
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(devicePropCode.rawValue)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeStartRecordCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.StartRecord.rawValue
		container.m_containerData.transactionId = transactionId
		
		let storageId: UInt32 = 0
		container.appendToEndOfPayload(storageId)
		
		let objectFormatCode: UInt32 = UInt32(ObjectFormatCode.Unspecified.rawValue)
		container.appendToEndOfPayload(objectFormatCode)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeStopRecordCommand(_ transactionId: TransactionID, _ transactionIdToStop: TransactionID) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.StopRecord.rawValue
		container.m_containerData.transactionId = transactionId
		
		container.appendToEndOfPayload(transactionIdToStop)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeStillCaptureCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.StillCapture.rawValue
		container.m_containerData.transactionId = transactionId
		
		let storageId: UInt32 = 0
		container.appendToEndOfPayload(storageId)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeChangeFocusCommand(_ transactionId: UInt32, _ nearer: Bool, _ steps: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.ChangeFocus.rawValue
		container.m_containerData.transactionId = transactionId
		
		let kNearer: UInt32 = 1
		let kFarther: UInt32 = 2
		container.appendToEndOfPayload(nearer ? kNearer : kFarther)
		container.appendToEndOfPayload(steps)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeAutoFocusCommand(_ transactionId: UInt32, _ xPosRatio: Float = 0, _ yPosRatio: Float = 0) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.InitiateAutoFocus.rawValue
		container.m_containerData.transactionId = transactionId
		
		let kCenter: UInt32 = 0
		let kCustom: UInt32 = 1
		if (xPosRatio == 0 || yPosRatio == 0) {
			container.appendToEndOfPayload(kCenter)
		}
		else {
			container.appendToEndOfPayload(kCustom)
			container.appendToEndOfPayload(UInt32(xPosRatio * 1000))
			container.appendToEndOfPayload(UInt32(yPosRatio * 1000))
		}
		
		let storageId: UInt32 = 0
		container.appendToEndOfPayload(storageId)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeCancelAutoFocusCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.TerminateAutoFocus.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeEnableAutoWhiteBalanceCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.EnableAutoWhiteBalance.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeDisableAutoWhiteBalanceCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.EnableAutoWhiteBalance.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeEnableAutoExposureCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.EnableAutoExposure.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	public func encodeDisableAutoExposureCommand(_ transactionId: UInt32) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.DisableAutoExposure.rawValue
		container.m_containerData.transactionId = transactionId
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	// Read DevicePropCode
	public func encodeGetDevicePropValueCommand(_ transactionId: UInt32, _ devicePropCode: DevicePropCode) -> Bool {
		var container = Container()
		container.reset()
		container.m_containerData.type = ContainerData.ContainerType.CommandBlock
		container.m_containerData.code = OperationCode.GetDevicePropValue.rawValue
		container.m_containerData.transactionId = transactionId
		container.appendToEndOfPayload(devicePropCode.rawValue)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(container, nil) ?? false
	}
	
	// Write DevicePropCode
	public func encodeSetDevicePropValueCommand<T>(_ transactionId: UInt32, _ devicePropCode: DevicePropCode, _ value: T) -> Bool {
		var command = Container()
		command.reset()
		command.m_containerData.type = ContainerData.ContainerType.CommandBlock
		command.m_containerData.code = OperationCode.SetDevicePropValue.rawValue
		command.m_containerData.transactionId = transactionId
		command.appendToEndOfPayload(devicePropCode.rawValue)
		
		var data = Container()
		data.reset()
		data.m_containerData.type = ContainerData.ContainerType.DataBlock
		data.m_containerData.code = OperationCode.SetDevicePropValue.rawValue
		data.m_containerData.transactionId = transactionId
		data.appendToEndOfPayload(value)
		
		return m_ptpPacketEncoderDelegate?.onPTPPacketEncoded(command, data) ?? false
	}
}
