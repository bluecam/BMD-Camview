/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


import Foundation
import Utility

public class PTPDeviceInfo {
	public var m_protocolVersion: UInt16 = 0
	public var m_vendorExtensionId: UInt32 = 0
	public var m_vendorExtensionVersion: UInt16 = 0
	public var m_vendorExtensionDesc: String = ""
	public var m_functionalMode: UInt16 = 0
	
	public var m_supportedOperationCode = [OperationCode]()
	public var m_supportedEventCode = [EventCode]()
	public var m_supportedDevicePropCode = [DevicePropCode]()
	
	public var m_videoFormats = [UInt16]()
	public var m_imageFormats = [UInt16]()
	
	public var m_manufacturer: String = ""
	public var m_model: String = ""
	
	public init() {}
	
	public func deserializeFromPayload(_ data: NSData) -> Bool {
		let deserialiser = PTPDeserialiser(data)
		do {
			try deserialiser.deserialise(&m_protocolVersion)
			try deserialiser.deserialise(&m_vendorExtensionId)
			try deserialiser.deserialise(&m_vendorExtensionVersion)
			try deserialiser.deserialise(&m_vendorExtensionDesc)
			try deserialiser.deserialise(&m_functionalMode)
			try deserialiser.deserialise(&m_supportedOperationCode)
			try deserialiser.deserialise(&m_supportedEventCode)
			try deserialiser.deserialise(&m_supportedDevicePropCode)
			try deserialiser.deserialise(&m_videoFormats)
			try deserialiser.deserialise(&m_imageFormats)
			try deserialiser.deserialise(&m_manufacturer)
			try deserialiser.deserialise(&m_model)
			return true
		} catch {
			// Failed to deserialise PTP device info
			return false
		}
	}

	public func printDebug() {
		Logger.LogWithInfo("DeviceInfo:")
		Logger.LogWithInfo("m_protocolVersion: \(m_protocolVersion)")
		Logger.LogWithInfo("m_vendorExtensionId: \(m_vendorExtensionId)")
		Logger.LogWithInfo("m_vendorExtensionVersion: \(m_vendorExtensionVersion)")
		Logger.LogWithInfo("m_vendorExtensionDesc: \(m_vendorExtensionDesc)")
		Logger.LogWithInfo("m_functionalMode: \(m_functionalMode)")
		Logger.LogWithInfo("m_supportedOperationCode: \(m_supportedOperationCode)")
		Logger.LogWithInfo("m_supportedEventCode: \(m_supportedEventCode)")
		Logger.LogWithInfo("m_supportedDevicePropCode: \(m_supportedDevicePropCode)")
		Logger.LogWithInfo("m_manufacturer: \(m_manufacturer)")
		Logger.LogWithInfo("m_model: \(m_model)")
	}
}
