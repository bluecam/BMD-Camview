/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation
import Utility

public struct CCUPacketTypes {
    public struct PacketFormatIndex {
        public static let Destination: Int = 0
        public static let CommandLength: Int = 1
        public static let CommandId: Int = 2
        public static let Source: Int = 3
        public static let Category: Int = 4
        public static let Parameter: Int = 5
        public static let DataType: Int = 6
        public static let OperationType: Int = 7
        public static let PayloadStart: Int = 8
    }

    public static let kPacketSizeMin: UInt8 = 8
    public static let kPacketSizeMax: UInt8 = 64
    public static let kCCUPacketHeaderSize: UInt8 = 4
    public static let kCCUCommandHeaderSize: UInt8 = 4
    public static let kCUUPayloadOffset: UInt8 = 8

    // Camera ID that is specified to broadcast a command to all cameras
    public static let kBroadcastTarget: UInt8 = 255

    // Data types
    public typealias ccu_fixed_t = Int16

    public static func CCUFixedFromFloat(_ f: Float) -> ccu_fixed_t {
        return ccu_fixed_t(f * 2048.0)
    }

    public static func CCUFloatFromFixed(_ f: ccu_fixed_t) -> Float {
        return Float(f) / 2048.0
    }

    public static func CCUFloatFromFixed(_ f: UInt16) -> Float {
        return Float(f) / 2048.0
    }

    public static func CCUPercentFromFixed(_ f: ccu_fixed_t) -> Int32 {
        return (Int32(f) * 100) / 2048
    }
    
    public static let kLensAperture_NoLens: Int16 = -32768
    

    public typealias DataType = UInt8
    public struct DataTypes {
        public static let kVoid: DataType = 0
        public static let kBool: DataType = 0
        public static let kInt8: DataType = 1
        public static let kInt16: DataType = 2
        public static let kInt32: DataType = 3
        public static let kInt64: DataType = 4
        public static let kString: DataType = 5
        public static let kFixed16: DataType = 128
    }

    public enum OperationType: UInt8 {
        case AssignValue = 0
        case OffsetValue = 1
        case StatusUpdate = 2
    }

    public enum CommandID: UInt8 {
        case ChangeConfiguration = 0
    }

    // Command Category
    public enum Category: UInt8 {
        case Lens = 0
        case Video = 1
        case Audio = 2
        case Output = 3
        case Display = 4
        case Tally = 5
        case Reference = 6
        case Configuration = 7
        case ColorCorrection = 8
        case Status = 9
        case Media = 10
        case ExternalDeviceControl = 11
        case Metadata = 12
    }

    // *** Parameters for each Command Category *** //
    public enum LensParameter: UInt8 {
        case Focus = 0
        case AutoFocus = 1
        case ApertureFstop = 2
        case ApertureNormalised = 3
        case ApertureOrdinal = 4
        case AutoAperture = 5
        case ImageStabilisation = 6
        case Zoom = 7
        case ZoomNormalised = 8
        case ContinuousZoom = 9
    }

    public enum VideoParameter: UInt8 {
        case Mode = 0
        case SensorGain = 1
        case ManualWB = 2
        case SetAutoWB = 3
        case RestoreAutoWB = 4
        case Exposure = 5
        case ExposureOrdinal = 6
        case DynamicRange = 7
        case SharpeningLevel = 8
        case RecordingFormat = 9
		case AutoExposureMode = 10
		case ShutterAngle = 11
		case ShutterSpeed = 12
		case Gain = 13
		case ISO = 14
		case DisplayLUT = 15
		case NDFilterStop = 16
    }

    public enum AudioParameter: UInt8 {
        case MicLevel = 0
        case HeadphoneLevel = 1
        case HeadphoneProgramMix = 2
        case SpeakerLevel = 3
        case InputType = 4
        case InputLevels = 5
        case PhantomPower = 6
    }

    public enum OutputParameter: UInt8 {
        case OverlayEnables = 0
        case FrameGuideStyle = 1 // legacy Cameras 3.x packet was never de-embedded by camera
        case FrameGuideOpacity = 2 // legacy Cameras 3.x packet was never de-embedded by camera
        case Overlays = 3
    }

    public enum DisplayParameter: UInt8 {
        case Brightness = 0
        case Overlays = 1
        case ZebraLevel = 2
        case PeakingLevel = 3
        case ColourBars = 4
        case FocusAssist = 5
        case TimecodeSource = 7
    }

    public enum TallyParameter: UInt8 {
        case Brightness = 0
        case FrontBrightness = 1
        case RearBrightness = 2
    }

    public enum ReferenceParameter: UInt8 {
        case Source = 0
        case Offset = 1
    }

    public enum ConfigurationParameter: UInt8 {
        case SystemClock = 0
        case Language = 1
        case Timezone = 2
        case Location = 3
    }

    public enum ColorCorrectionParameter: UInt8 {
        case LiftAdjust = 0
        case GammaAdjust = 1
        case GainAdjust = 2
        case OffsetAdjust = 3
        case ContrastAdjust = 4
        case LumaContribution = 5
        case ColourAdjust = 6
        case ResetDefault = 7
    }

    public enum StatusParameter: UInt8 {
        case Battery = 0
        case MediaStatus = 1
        case RemainingRecordTime = 2
        case DisplayThresholds = 3
        case DisplayTimecode = 4
        case CameraSpec = 5
        case SwitcherStatus = 6
        case DisplayParameters = 7
    }

    public enum MediaParameter: UInt8 {
        case Codec = 0
        case TransportMode = 1
    }

    public enum ExDevControlParameter: UInt8 {
        case PanTiltVelocity = 0
    }

    public enum MetadataParameter: UInt8 {
        case Reel = 0
        case SceneTags = 1
        case Scene = 2
        case Take = 3
        case GoodTake = 4
        case CameraId = 5
        case CameraOperator = 6
        case Director = 7
        case ProjectName = 8
        case LensType = 9
        case LensIris = 10
        case LensFocalLength = 11
        case LensDistance = 12
        case LensFilter = 13
        case SlateForType = 14
        case SlateForName = 15
    }

    // *** Data Structure and Enums, orgranised by Command Category: Parameter *** //
    // Video: Video Mode: MRate
    public enum VideoModeMRate: UInt8 {
        case Regular = 0
        case MRate = 1
    }

    // Video: Video Mode: Dimensions
    public enum VideoModeDimensions: UInt8 {
        case NTSC = 0
        case PAL = 1
        case HD720 = 2
        case HD1080 = 3
        case _2K = 4
        case _2KDCI = 5
        case UHD4K = 6
    }

    // Video: Video Mode: Interlaced
    public enum VideoModeInterlaced: UInt8 {
        case Progressive = 0
        case Interlaced = 1
    }

    // Video: Video Mode: Colorspace
    public enum VideoModeColorspace: UInt8 {
        case YUV = 0
    }

    // Video: Dynamic Range
    public enum VideoDynamicRange: UInt8 {
        case Film = 0
        case Video = 1
    }

    // Video: Recording Format: Flags
    public typealias VideoRecordingFormatFlags = UInt16
    public enum VideoRecordingFormat: UInt16 {
        case FileMRate = 0x01
        case SensorMRate = 0x02
        case SensorOffSpeed = 0x04
        case Interlaced = 0x08
        case WindowedMode = 0x10
    }

	// Video: Auto Exposure Mode
	public enum AutoExposureMode: Int8 {
		case Manual = 0
		case Iris = 1
		case Shutter = 2
		case IrisAndShutter = 3
		case ShutterAndIris = 4
	}

    // Diplay: Timecode Source
    public enum DisplayTimecodeSource: Int8 {
        case Clip = 0
        case Timecode = 1
    }

    // Status: Battery: Flags
    typealias StatusBatteryFlags = UInt16
    public enum BatteryStatus: UInt16 {
        case BatteryPresent = 0x01
        case ACPresent = 0x02
        case BatteryIsCharging = 0x04
        case ChargeRemainingPercentageIsEstimated = 0x08
        case PreferVoltageDisplay = 0x10
    }

    // Status: Media
    public enum MediaStatus: Int8 {
        case None = 0
        case Ready = 1
        case MountError = -1
        case RecordError = -2
    }

    // Status: Video display settings
    public enum DisplayFocusAssistMode: Int32 {
        case ColouredLines = 0
        case Peak = 1
    }
    
    public enum ApertureUnits: Int16 {
        case Fstops = 0
        case Tstops = 1
    };

	public enum ApertureStepLength : Int16 {
		case FullStop		= 0
		case HalfStop       = 1
		case QuarterStop	= 2
		case EighthStop 	= 3
		case SixteenthStop 	= 4
	};

    public enum DisplayFocusAssistColour: Int32 {
        case Red = 0
        case Green = 1
        case Blue = 2
        case White = 3
        case Black = 4
    }

    // Status: Camera Specifications: Manufacturer
    public enum CameraManufacturer: UInt8 {
        case Blackmagic = 0
    }

    // Status: Camera Specifications: Camera Variant
    public typealias CameraVariant = UInt8
    public struct CameraVariants {
        public static let kDefault: CameraVariant = 0
        public static let kURSAMini_46K: CameraVariant = 0
        public static let kURSAMini_4K: CameraVariant = 0
        public static let kURSA_4K_V1: CameraVariant = 0
        public static let kURSA_4K_V2: CameraVariant = 1
        public static let kURSA_46K: CameraVariant = 2
    }

    // Status: Camera Specifications: Color Science Generation
    public enum ColorScienceGeneration: UInt8 {
        case Unknown = 0
        case Generation3 = 3
    }

    // Output: Overlay Enables: Frame Guide Style
    public enum FrameGuideStyle: UInt8 {
        case Off = 0
        case _240_1 = 1
        case _239_1 = 2
        case _235_1 = 3
        case _185_1 = 4
        case _16_9 = 5
        case _14_9 = 6
        case _4_3 = 7
        case _2_1 = 8
        case _4_5 = 9
        case _1_1 = 10
        case Custom = 11
    }

    // Output: Overlay Enables: Grid Style
    public typealias GridStyleFlags = UInt8
    public enum GridStyleFlag: UInt8 {
        case Thirds = 0x01
        case CrossHairs = 0x02
        case CenterDot = 0x04
    }

    // Status: Switcher Status: Flags
    public typealias SwitcherStatusFlags = UInt8
    public enum SwitcherStatusFlag: UInt8 {
        case SwitcherConnected = 0x01
        case PreviewTally = 0x02
        case ProgramTally = 0x04
    }

    // Media: Codec: Basic Codec
    public enum BasicCodec: UInt8 {
        case RAW = 0
        case DNxHD = 1
        case ProRes = 2
    }

    // Media: Codec: Codec Variant
    public typealias CodecVariant = UInt8
    public struct CodecVariants {
        public static let kDefault: CodecVariant = 0
        public static let kProResHQ: CodecVariant = 0
        public static let kProRes422: CodecVariant = 1
        public static let kProResLT: CodecVariant = 2
        public static let kProResProxy: CodecVariant = 3
        public static let kProRes444: CodecVariant = 4
        public static let kProRes444XQ: CodecVariant = 5

        public static let kLosslessRaw: CodecVariant = 0
        public static let kRaw3_1: CodecVariant = 1
        public static let kRaw4_1: CodecVariant = 2
    }

    // Media: Transport Mode: Mode
    public enum MediaTransportMode: UInt8 {
        case Preview = 0
        case Play = 1
        case Record = 2
    }

    // Media: Transport Mode: Flags
    public typealias MediaTransportFlags = UInt8
    public enum MediaTransportFlag: UInt8 {
        case Loop = 0x01
        case PlayAll = 0x02
        case Disk1Active = 0x20
        case Disk2Active = 0x40
		case Disk3Active = 0x10
        case TimelapseRecording = 0x80
    }

	public static let slotActiveMasks = [
		MediaTransportFlag.Disk1Active.rawValue,
		MediaTransportFlag.Disk2Active.rawValue,
		MediaTransportFlag.Disk3Active.rawValue,
		0
	]

    public enum ActiveStorageMedium: UInt8 {
        case CFastCard = 0
        case SDCard = 1
		case SSD = 2
		case USB = 3
    }

    public enum MetadataSceneTag: Int8 {
        case None = -1
        case WS = 0
        case CU = 1
        case MS = 2
        case BCU = 3
        case MCU = 4
        case ECU = 5
    }

    public enum MetadataLocationTypeTag: UInt8 {
        case Exterior = 0
        case Interior = 1
    }

    public enum MetadataDayNightTag: UInt8 {
        case Night = 0
        case Day = 1
    }

    public enum MetadataTakeTag: Int8 {
        case None = -1
        case PU = 0
        case VFX = 1
        case SER = 2
    }

    public enum MetadataSlateForType: Int8 {
        case NextClip = 0
        case PlaybackFile = 1
    }

    public struct MetadataMaxStringLength {
        public static let kScene: Int8 = 5
        public static let kCameraId: Int8 = 1
        public static let kCameraOperator: Int8 = 29
        public static let kDirector: Int8 = 29
        public static let kProjectName: Int8 = 29
        public static let kLensType: Int8 = 56
        public static let kLensIris: Int8 = 20
        public static let kLensFocalLength: Int8 = 30
        public static let kLensDistance: Int8 = 50
        public static let kLensFilter: Int8 = 30
    }

    public static let MetadataParameterToStringLengthMap: [MetadataParameter: Int8] = [
        MetadataParameter.Scene: MetadataMaxStringLength.kScene,
        MetadataParameter.CameraId: MetadataMaxStringLength.kCameraId,
        MetadataParameter.CameraOperator: MetadataMaxStringLength.kCameraOperator,
        MetadataParameter.Director: MetadataMaxStringLength.kDirector,
        MetadataParameter.ProjectName: MetadataMaxStringLength.kProjectName,
        MetadataParameter.LensType: MetadataMaxStringLength.kLensType,
        MetadataParameter.LensIris: MetadataMaxStringLength.kLensIris,
        MetadataParameter.LensFocalLength: MetadataMaxStringLength.kLensFocalLength,
        MetadataParameter.LensDistance: MetadataMaxStringLength.kLensDistance,
        MetadataParameter.LensFilter: MetadataMaxStringLength.kLensFilter,
    ]

    public struct RecordingFormatData {
        public var frameRate: Int16 = 0
        public var offSpeedFrameRate: Int16 = 0
        public var width: Int16 = 0
        public var height: Int16 = 0
        public var mRateEnabled: Bool = false
        public var offSpeedEnabled: Bool = false
        public var interlacedEnabled: Bool = false
        public var windowedModeEnabled: Bool = false
		
		public init() {}
    }

    // *** Command Structure *** //
    public struct Command {
        // Command Header:
        var target: UInt8 = 0 // Destination device
        var length: UInt8 = 0 // Length of this command (excluding the 4-byte Command Header)
        var commandID: CommandID
        var reserved: UInt8
        // Command Data:
        var category: Category
        var parameter: UInt8
        var dataType: CCUPacketTypes.DataType
        var operationType: OperationType
        var data: [UInt8]

        init() {
            target = 0
            length = 0
            commandID = CCUPacketTypes.CommandID.ChangeConfiguration
            reserved = 0
            category = Category(rawValue: 0)!
            parameter = 0
            dataType = 0
            operationType = CCUPacketTypes.OperationType.AssignValue
            data = [UInt8](repeating: 0, count: 0)
        }

        public func serialize() -> Data {
            let headersSize = CCUPacketTypes.kCCUPacketHeaderSize + CCUPacketTypes.kCCUCommandHeaderSize
            let payloadSize = UInt8(data.count)
            let padBytes: UInt8 = ((length + 3) & ~3) - length
            var buffer: [UInt8] = [UInt8](repeating: 0, count: Int(headersSize + payloadSize + padBytes))

            buffer[PacketFormatIndex.Destination] = target
            buffer[PacketFormatIndex.CommandLength] = length
            buffer[PacketFormatIndex.CommandId] = commandID.rawValue
            buffer[PacketFormatIndex.Source] = reserved

            buffer[PacketFormatIndex.Category] = category.rawValue
            buffer[PacketFormatIndex.Parameter] = parameter
            buffer[PacketFormatIndex.DataType] = dataType
            buffer[PacketFormatIndex.OperationType] = operationType.rawValue

            for payloadIndex in 0 ..< data.count {
                let packetIndex = PacketFormatIndex.PayloadStart + Int(payloadIndex)
                buffer[packetIndex] = data[Int(payloadIndex)]
            }

			return Data(buffer)
        }
    }

    public static func InitCommand(target: UInt8, commandId: CommandID, category: Category, parameter: UInt8, operationType: OperationType, dataType: DataType, data: [UInt8]) -> (Command?) {
        let commandLength = CCUPacketTypes.kCCUCommandHeaderSize + UInt8(data.count)
        let packetSize = commandLength + CCUPacketTypes.kCCUPacketHeaderSize
        if packetSize > CCUPacketTypes.kPacketSizeMax {
            Logger.LogError("Packet size (\(packetSize)) exceeds kPacketSizeMax (\(CCUPacketTypes.kCCUPacketHeaderSize)). Aborting InitCommand.")
            return nil
        }

        var command = Command()

        command.target = target
        command.length = commandLength
        command.commandID = commandId
        command.reserved = 0
        command.category = category
        command.parameter = parameter
        command.operationType = operationType
        command.dataType = dataType
        command.data = data

        return command
    }
}
