/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation
import Utility

struct CCUValidationFunctions {
    static func ValidateCCUPacket(packetAsData data: Data) -> Bool {
        let byteArray = [UInt8](data)
        return ValidateCCUPacket(packetAsByteArray: byteArray)
    }

    static func ValidateCCUPacket(packetAsByteArray byteArray: [UInt8]) -> Bool {
        let packetSize = UInt8(byteArray.count)
        let isSizeValid = (packetSize >= CCUPacketTypes.kPacketSizeMin && packetSize <= CCUPacketTypes.kPacketSizeMax)
        if !isSizeValid {
            //Logger.LogWithInfo("CCU packet (\(packetSize) bytes) is not between \(CCUPacketTypes.kPacketSizeMin) and \(CCUPacketTypes.kPacketSizeMax) bytes.")
            return false
        }

        let commandLength = byteArray[CCUPacketTypes.PacketFormatIndex.CommandLength]
        let expectedPayloadSize = commandLength - CCUPacketTypes.kCCUCommandHeaderSize
        let actualPayloadSize = packetSize - (CCUPacketTypes.kCCUPacketHeaderSize + CCUPacketTypes.kCCUCommandHeaderSize)
        if actualPayloadSize < expectedPayloadSize {
            Logger.LogWithInfo("Payload (\(actualPayloadSize)) is smaller than expected (\(expectedPayloadSize)).")
            return false
        }

        let categoryValue = byteArray[CCUPacketTypes.PacketFormatIndex.Category]
        let category: CCUPacketTypes.Category? = CCUPacketTypes.Category(rawValue: categoryValue)
        if category == nil {
            Logger.LogWithInfo("CCU packet has invalid category (\(categoryValue)).")
            return false
        }

        var isParamterValid = false
        let parameterValue: UInt8 = byteArray[CCUPacketTypes.PacketFormatIndex.Parameter]
        switch category!
        {
        case .Lens:
            let parameter = CCUPacketTypes.LensParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Video:
            let parameter = CCUPacketTypes.VideoParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Audio:
            let parameter = CCUPacketTypes.AudioParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Output:
            let parameter = CCUPacketTypes.OutputParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Display:
            let parameter = CCUPacketTypes.DisplayParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Tally:
            let parameter = CCUPacketTypes.TallyParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Reference:
            let parameter = CCUPacketTypes.ReferenceParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Configuration:
            let parameter = CCUPacketTypes.ConfigurationParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .ColorCorrection:
            let parameter = CCUPacketTypes.ColorCorrectionParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Status:
            let parameter = CCUPacketTypes.StatusParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Media:
            let parameter = CCUPacketTypes.MediaParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .ExternalDeviceControl:
            let parameter = CCUPacketTypes.ExDevControlParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        case .Metadata:
            let parameter = CCUPacketTypes.MetadataParameter(rawValue: parameterValue)
            isParamterValid = parameter != nil
        }

        if !isParamterValid {
            //Logger.LogWithInfo("CCU packet has invalid parameter \(parameterValue) for category \(category.getString()).")
            return false
        }

        return true
    }
}
