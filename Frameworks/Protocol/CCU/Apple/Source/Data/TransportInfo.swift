/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation
import Utility

public struct TransportInfo {
	public enum DecodeError: Error {
		case UnrecognisedMode(_ message: String)
	}

	public typealias MediaTransportFlag = CCUPacketTypes.MediaTransportFlag

	public var transportMode = CCUPacketTypes.MediaTransportMode.Preview
	public var speed: Int8 = 0

	public var loop = false
	public var playAll = false
	public var timelapseRecording = false

	public struct Slot {
		public var active = false
		public var medium = CCUPacketTypes.ActiveStorageMedium.CFastCard
	}
	public var slots: [Slot] = []

	public func getActiveSlotCount() -> Int {
		return slots.filter{ $0.active }.count
	}

	public init() {}

	init(from data: [UInt8]) throws {
		var index = 0
		if let mode = CCUPacketTypes.MediaTransportMode(rawValue: data[index]) {
			transportMode = mode; index += 1
			speed = Int8(bitPattern: data[index]); index += 1

			let flags = data[index]; index += 1
			loop = flags & MediaTransportFlag.Loop.rawValue != 0
			playAll = flags & MediaTransportFlag.PlayAll.rawValue != 0
			timelapseRecording = flags & MediaTransportFlag.TimelapseRecording.rawValue != 0

			let slotCount = data.count - index
			slots = [Slot](repeating: Slot(), count: slotCount)
			for i in 0 ..< slots.count {
				slots[i].active = flags & CCUPacketTypes.slotActiveMasks[i] != 0
				if let medium = CCUPacketTypes.ActiveStorageMedium(rawValue: data[index]) {
					slots[i].medium = medium
				} else {
					Logger.LogWarning("Unrecognised storage medium value (\(data[index])) for slot (\(i))")
				}
				index += 1
			}
		} else {
			throw DecodeError.UnrecognisedMode("Unrecognised transport mode value (\(data[index]))")
		}
	}

	func toArray() -> [UInt8] {
		// package flags
		var flags: UInt8 = 0
		if loop {
			flags |= MediaTransportFlag.Loop.rawValue
		}

		if playAll {
			flags |= MediaTransportFlag.PlayAll.rawValue
		}

		if timelapseRecording {
			flags |= MediaTransportFlag.TimelapseRecording.rawValue
		}

		for (i, slot) in slots.enumerated() {
			if (slot.active) {
				flags |= CCUPacketTypes.slotActiveMasks[i]
			}
		}

		// package data
		var data: [UInt8] = []
		data.append(transportMode.rawValue)
		data.append(UInt8(bitPattern: speed))
		data.append(flags)
		for slot in slots {
			data.append(slot.medium.rawValue)
		}

		return data
	}
}
