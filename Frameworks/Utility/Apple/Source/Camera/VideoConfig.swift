/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Foundation

public typealias Decibels = Int

public struct VideoConfig {
    public struct WhiteBalancePreset {
        public let whiteBalance: Int16
        public let tint: Int16

        init(whiteBalance: Int16, tint: Int16) {
            self.whiteBalance = whiteBalance
            self.tint = tint
        }
    }

    public static let kWhiteBalancePresets: [WhiteBalancePreset] = [
        WhiteBalancePreset(whiteBalance: 5600, tint: 10),
        WhiteBalancePreset(whiteBalance: 3200, tint: 0),
        WhiteBalancePreset(whiteBalance: 4000, tint: 15),
        WhiteBalancePreset(whiteBalance: 4500, tint: 15),
        WhiteBalancePreset(whiteBalance: 6500, tint: 10),
    ]

    public static let kWhiteBalanceMin: Int16 = 2500
    public static let kWhiteBalanceMax: Int16 = 10000
    public static let kWhiteBalanceStep: Int16 = 50

    public static let kTintMin: Int16 = -50
    public static let kTintMax: Int16 = 50
    
    public static let kOffSpeedFrameRateMin: [CameraModel:Int16] = [
        CameraModel.Unknown : 5,				// Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the lowest possible value across all products.
        CameraModel.URSAMiniPro : 12,
        CameraModel.URSABroadcast : 5,
		CameraModel.URSABroadcastG2 : 5,
        CameraModel.URSAMiniProG2 : 12,
        CameraModel.URSAMiniPro12K : 12,
        CameraModel.PocketCinemaCamera4K : 5,
        CameraModel.PocketCinemaCamera6K : 5,
		CameraModel.PocketCinemaCamera6KG2: 5,
        CameraModel.PocketCinemaCamera6KPro : 5,
    ]
    
    public static let kOffSpeedFrameRateMax: [CameraModel:Int16] = [
        CameraModel.Unknown : 300,			// Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the highest possible value across all products.
        CameraModel.URSAMiniPro : 120,
		CameraModel.URSABroadcast : 120,
        CameraModel.URSABroadcastG2 : 120,
        CameraModel.URSAMiniProG2 : 300,
        CameraModel.URSAMiniPro12K : 240,
        CameraModel.PocketCinemaCamera4K : 120,
        CameraModel.PocketCinemaCamera6K : 120,
		CameraModel.PocketCinemaCamera6KG2: 120,
        CameraModel.PocketCinemaCamera6KPro : 120,
    ]

    public static let kISOValuesPocket: [Int] = [100, 125, 160, 200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200, 4000, 5000, 6400, 8000, 10000, 12800, 16000, 20000, 25600]
	public static let kISOValuesURSA: [Int] = [200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200]
	public static let kISOValuesURSA12K: [Int] = [125, 160, 200, 250, 320, 400, 500, 640, 800, 1000, 1250, 1600, 2000, 2500, 3200]
	
    public static let kISOValues: [CameraModel:[Int]] = [
        CameraModel.Unknown : kISOValuesPocket,				// Any new camera model which has not been added here or to the CCU will use Unknown. Keep Unknown as the largest range.
        CameraModel.URSAMiniPro : kISOValuesURSA,
		CameraModel.URSABroadcast : kISOValuesURSA,
		CameraModel.URSABroadcastG2 : kISOValuesURSA,
        CameraModel.URSAMiniProG2 : kISOValuesURSA,
        CameraModel.URSAMiniPro12K : kISOValuesURSA12K,
        CameraModel.PocketCinemaCamera4K : kISOValuesPocket,
        CameraModel.PocketCinemaCamera6K : kISOValuesPocket,
		CameraModel.PocketCinemaCamera6KG2 : kISOValuesPocket,
        CameraModel.PocketCinemaCamera6KPro : kISOValuesPocket,
    ]

	static let gainDecibelValuesUrsaBroadcast = [Decibels](stride(from: -6, through: 18, by: 2))
	static let gainDecibelValuesUrsaBroadcastG2 = [Decibels](stride(from: -12, through: 36, by: 2))

	public static let gainValues: [CameraModel:[Decibels]] = [
		CameraModel.Unknown: gainDecibelValuesUrsaBroadcastG2,
		CameraModel.URSABroadcast: gainDecibelValuesUrsaBroadcast,
		CameraModel.URSABroadcastG2: gainDecibelValuesUrsaBroadcastG2,
	]
	
    public static let kSentSensorGainBase: UInt16 = 100
    public static let kReceivedSensorGainBase: UInt16 = 200

    public static let kShutterAngles: [Double] = [11.2, 15.0, 22.5, 30.0, 37.5, 45.0, 60.0, 72.0, 75.0, 90.0, 108.0, 120.0, 144.0, 150.0, 172.8, 180.0, 216.0, 270.0, 324.0, 360.0]
    public static let kShutterSpeeds: [Int32] = [24, 25, 30, 50, 60, 100, 125, 200, 250, 500, 1000, 2000]
	public static let kShutterSpeedMin: Int = 24
	public static let kShutterSpeedMax: Int = 2000
	public static let kShutterAngleMin: Double = 5.0
	public static let kShutterAngleMax: Double = 360.0

	public static let kAvailableNDFilterStops: [Float] = [0.0, 2.0, 4.0, 6.0]

	public enum NDFilterDisplayMode : Int16 {
		case Stop
		case Density
		case Transmittance
	}

	public static let kNDFilterTextForStopForDisplayMode: [Float: [NDFilterDisplayMode: String]] = [
		0.0: [
			NDFilterDisplayMode.Stop: "Clear",
			NDFilterDisplayMode.Density: "Clear",
			NDFilterDisplayMode.Transmittance: "Clear"
		],
		2.0: [
			NDFilterDisplayMode.Stop: "2.0 Stops",
			NDFilterDisplayMode.Density: "0.6",
			NDFilterDisplayMode.Transmittance: "1/4"
		],
		4.0: [
			NDFilterDisplayMode.Stop: "4.0 Stops",
			NDFilterDisplayMode.Density: "1.2",
			NDFilterDisplayMode.Transmittance: "1/16"
		],
		6.0: [
			NDFilterDisplayMode.Stop: "6.0 Stops",
			NDFilterDisplayMode.Density: "1.8",
			NDFilterDisplayMode.Transmittance: "1/64"
		]
	]

	public static let kProductHasNDFilter: [CameraModel] = [
		CameraModel.URSABroadcast,
		CameraModel.URSABroadcastG2,
		CameraModel.URSAMiniPro,
		CameraModel.URSAMiniProG2,
		CameraModel.PocketCinemaCamera6KPro,
		CameraModel.URSAMiniPro12K,
	]

	public static let kProductCanChangeNDFilterRemotely: [CameraModel] = [
		CameraModel.PocketCinemaCamera6KPro,
	]

    public static func GetWhiteBalancePresetFromValues(_ whiteBalance: Int16, _ tint: Int16) -> Int {
        var presetIndex: Int = 0
        for preset in kWhiteBalancePresets {
            if whiteBalance == preset.whiteBalance && tint == preset.tint {
                return presetIndex
            }

            presetIndex += 1
        }

        return -1
    }

    public static func GetShutterSpeed(for angle: Double, with frameRate: Int16, mRateEnabled: Bool) -> Int32 {
        if frameRate <= 0 {
            return 0
        }

        if mRateEnabled {
            let frameRateReciprocal: Double = 1.0 / Double(frameRate)
            let angleFraction: Double = Double(angle) / 360.0
            let exposure = Int32(frameRateReciprocal * angleFraction * 1_001_000.0) + 1
            return exposure
        } else {
            let frameRateReciprocal: Double = 1.0 / Double(frameRate)
            let angleFraction: Double = Double(angle) / 360.0
            let exposure = Int32(frameRateReciprocal * angleFraction * 1_000_000.0) + 1
            return exposure
        }
    }

    public static func GetShutterAngleIndex(for shutterSpeed: Int32, with frameRate: Int16) -> Int {
        if frameRate <= 0 {
            return 0
        }

        let frameRateReciprocal: Double = 1.0 / Double(frameRate)
        let angleFraction: Double = Double(shutterSpeed) / (frameRateReciprocal * 1_000_000.0)
        let angle = Double(angleFraction * 360.0)

        var closestAngle: Double = 360.0
        var closestIndex: Int = -1

        var shutterIndex = 0
        for shutterAngle in kShutterAngles {
            let difference = abs(angle - shutterAngle)

            if difference < closestAngle {
                closestAngle = difference
                closestIndex = shutterIndex
            }

            shutterIndex += 1
        }

        return closestIndex
    }

    public static func GetShutterAngle(for shutterSpeed: Int32, with frameRate: Int16, mRateEnabled: Bool) -> Double {
        if frameRate <= 0 {
            return 0
        }

        if mRateEnabled {
            let frameRateReciprocal: Double = 1.0 / Double(frameRate)
            let angleFraction: Double = Double(shutterSpeed) / (frameRateReciprocal * 1_001_000.0)
            let angle = Double(angleFraction * 360.0)

            return Double(Int((angle * 10.0).rounded())) / 10.0
        } else {
            let frameRateReciprocal: Double = 1.0 / Double(frameRate)
            let angleFraction: Double = Double(shutterSpeed) / (frameRateReciprocal * 1_000_000.0)
            let angle = Double(angleFraction * 360.0)

            return Double(Int((angle * 10.0).rounded())) / 10.0
        }
    }
}
