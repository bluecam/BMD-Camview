/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

import Foundation

public struct Queue<T> {
	var items:[T] = []
	
	public init() {}
	
	public mutating func enqueue(element: T) {
		items.append(element)
	}
	
	public mutating func dequeue() -> T? {
		if items.isEmpty {
			return nil
		}
		else {
			let tempElement = items.first
			items.remove(at: 0)
			return tempElement
		}
	}
	
	public func count() -> Int {
		return items.count
	}

	public func get(index: Int) -> T? {
		if items.isEmpty {
			return nil
		}
		else{
			return items[index]
		}
	}
	
	// Use this like this:
	//	m_queue.withReferenceToIndex(index: 0) { (item: inout T) in
	//		item.responseCode = responseCode
	//	}
	public mutating func withReferenceToIndex(index: Int, item: (inout T) -> Void) {
		item(&items[index])
	}
}
