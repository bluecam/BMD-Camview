/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import Utility
import CCU
import BluetoothControl
import CoreBluetooth
#if os(macOS)
import USBControl
#endif

// TransportControl
public protocol InitialConnectionToUIDelegate: AnyObject {
	// Bluetooth
    func updateDiscoveredPeripheralList(_ discoveredPeripheralList: [DiscoveredPeripheral])
    func transitionToCameraControl()
    func onSuccessfulPairing(_ peripheralName: String)
	func onPairingFailed(_ peripheralName: String, resolution: BluetoothPairingFailureType)
    func onIncompatibleProtocolVersion(_ peripheralName: String, cameraVersion: Int, appVersion: Int)
	
#if os(macOS)
	// USB
	func updateDiscoveredUSBPTPDevices(_ usbPTPDevices: [USBControl.USBBulkDevice])
	func onConnectionFailed()
#endif
}

public protocol InitialConnectionFromUIDelegate: AnyObject {
    func attemptConnection(to identifier: UUID)
    func disconnect()
    func refreshDeviceList()
	
#if os(macOS)
	func connectToPTPDevice(to usbBulkDevice: USBControl.USBBulkDevice)
#endif
}

public protocol ConnectionStatusToUIDelegate: AnyObject {
    func onConnectionLost()
    func onDisconnection()
    func onReconnection()
    func onCameraPoweredOff()
    func onCameraPoweredOn()
    func onCameraReady()
}

// Slate control
public protocol IncomingSlateToUIDelegate: AnyObject {
	func onReelReceived(_ reelNumber: Int16, _ editable: Bool)
    func onReelModifiable(_ modifiable: Bool)
    func onSceneTagsReceived(_ sceneTagIndex: Int, _ locationTagIndex: Int, _ timeTagIndex: Int)
    func onSceneReceived(_ scene: String)
    func onTakeReceived(_ takeNumber: Int8, _ takeTagIndex: Int)
    func onGoodTakeReceived(_ goodTake: Bool)
    func onSlateForNameReceived(_ slateForName: String)
    func setSlateForNextClip(_ isSlateForNextClip: Bool)
}

public protocol OutgoingSlateFromUIDelegate: AnyObject {
    func onReelIncremented()
    func onReelDecremented()
    func onSceneTagSelected(sceneTagIndex: Int)
    func onLocationTagSelected(locationTagIndex: Int)
    func onTimeTagSelected(timeTagIndex: Int)
    func onSceneIncremented()
    func onSceneDecremented()
    func onTakeIncremented()
    func onTakeDecremented()
    func onTakeTagSelected(takeTagIndex: Int)
    func onGoodTakeToggled(_ goodTake: Bool)
}

public protocol OutgoingPowerFromUIDelegate: AnyObject {
    func onPowerOff()
}

// Camera control
public protocol IncomingCameraControlToUIDelegate: AnyObject {
    func onCameraSpecificationReceived(_ cameraModel: CameraModel)
    func onWhiteBalanceReceived(_ whiteBalance: Int16, _ tint: Int16, _ presetIndex: Int)
    func onOffSpeedFrameRateReceived(_ offSpeedEnabled: Bool, _ frameRate: Int16)
	func onApertureFstopReceived(_ fstop: Float, _ stopUnits: LensConfig.ApertureUnits)
	func onApertureNormalisedReceived(_ apertureNormalised: Float)
    func onShutterAngleReceived(_ shutterAngle: Double)
	func onShutterSpeedReceived(_ shutterSpeed: Int32)
    func onISOReceived(_ isoIndex: Int)
	func onGainReceived(_ gain: Decibels)
	func onNDFilterStopReceived(_ stop: Float, _ displayMode: VideoConfig.NDFilterDisplayMode)
    func onTransportModeReceived(_ transportMode: CCUPacketTypes.MediaTransportMode)
	func setIrisControlEnabled(_ enabled: Bool)
	func setShutterControlEnabled(_ enabled: Bool)
}

public protocol OutgoingCameraControlFromUIDelegate: AnyObject {
    func onTintIncremented() -> (tint: Int16, presetIndex: Int)
    func onTintDecremented() -> (tint: Int16, presetIndex: Int)
    func onWhiteBalanceIncremented() -> (whiteBalance: Int16, presetIndex: Int)
    func onWhiteBalanceDecremented() -> (whiteBalance: Int16, presetIndex: Int)

    func onWhiteBalancePresetPressed(_ presetIndex: Int, _ currentlySelected: Bool, _ saveCustomValues: Bool) -> (whiteBalance: Int16, tint: Int16)?
    func onWhiteBalanceChanged(_ whiteBalance: Int16) -> Int
    func onTintChanged(_ tint: Int16) -> Int
    func onAutoWhiteBalancePressed()
    func onOffSpeedFrameRateToggled(_ offSpeedEnabled: Bool)
    func onOffSpeedFrameRateIncremented() -> Int16
    func onOffSpeedFrameRateDecremented() -> Int16
    func onOffSpeedFrameRateChanged(_ frameRate: Int16)

	func onApertureIncremented(_ currentApertureNormalised: Float)
	func onApertureDecremented(_ currentApertureNormalised: Float)
	func onApertureNormalisedChanged(_ apertureNormalised: Float)
    func getApertureUnits() -> LensConfig.ApertureUnits
    
    func onShutterIncremented() -> Double
    func onShutterDecremented() -> Double
	func onShutterChanged(_ shutter: Double)

    func onSensorGainChanged(_ isoIndex: Int)
	func onGainSet(_ gain: Decibels)
	
	func onISOIncremented() -> Int
	func onISODecremented() -> Int
	func onISOChanged(_ isoIndex: Int)
	
	func onFocusPullIncremented() -> Int
	func onFocusPullDecremented() -> Int
	func onFocusPullChanged(_ focusPullStep: Int)

	func onNDFilterIncremented() -> Float
	func onNDFilterDecremented() -> Float
	func onNDFilterStopChanged(_ stops: Float, _ displayMode: VideoConfig.NDFilterDisplayMode)
}

// Recording control
public protocol IncomingRecordControlToUIDelegate: AnyObject {
    func setRecording(_ isRecording: Bool)
	func onActiveDisksReceived(_ active: [Bool])
    func onTimecodeReceived(_ timecode: String)
    func onRecordTimeRemainingReceived(_ remainingRecordTimes: [String])
    func onTimelapseReceived(_ isTimelapseActive: Bool)
    func setRecordingError(_ hasRecordingError: Bool)
    func setRecordTimeWarning(_ recordTimeWarning: RecordTimeWarning, _ cardIndex: Int)
    func showPlaybackView(for clipName: String, at playbackSpeed: Int)
    func hidePlaybackView()
    func updateClipName(_ clipName: String)
    func recordingEnabled(_ enabled: Bool)
}

public protocol OutgoingRecordControlFromUIDelegate: AnyObject {
    func onRecordPressed()
	func onStillCapturePressed()
	func onSlotPressed(_ index: Int)
    func onTimecodePressed()
}

public protocol CameraNameDelegate: AnyObject {
    func onCameraNameChanged(_ cameraName: String)
}

// Default implementations of the 'ToUI' protocols, so the client doesn't need to
// implement all methods of a protocol.

public extension InitialConnectionToUIDelegate {
	func updateDiscoveredPeripheralList(_ discoveredPeripheralList: [DiscoveredPeripheral]) {}
	func transitionToCameraControl() {}
	func onSuccessfulPairing(_ peripheralName: String) {}
	func onPairingFailed(_ peripheralName: String, resolution: BluetoothPairingFailureType) {}
	func onIncompatibleProtocolVersion(_ peripheralName: String, cameraVersion: Int, appVersion: Int) {}
	
#if os(macOS)
	func updateDiscoveredUSBPTPDevices(_ usbPTPDevices: [USBControl.USBBulkDevice]) {}
	func onConnectionFailed() {}
#endif
}

public extension ConnectionStatusToUIDelegate {
	func onConnectionLost() {}
	func onDisconnection() {}
	func onReconnection() {}
	func onCameraPoweredOff() {}
	func onCameraPoweredOn() {}
	func onCameraReady() {}
}

public extension IncomingSlateToUIDelegate {
	func onReelReceived(_ reelNumber: Int16, _ editable: Bool) {}
	func onSceneTagsReceived(_ sceneTagIndex: Int, _ locationTagIndex: Int, _ timeTagIndex: Int) {}
	func onSceneReceived(_ scene: String) {}
	func onTakeReceived(_ takeNumber: Int8, _ takeTagIndex: Int) {}
	func onGoodTakeReceived(_ goodTake: Bool) {}
	func onSlateForNameReceived(_ slateForName: String) {}
	func setSlateForNextClip(_ isSlateForNextClip: Bool) {}
}

public extension IncomingCameraControlToUIDelegate {
    func onCameraSpecificationReceived(_ cameraModel: CameraModel) {}
	func onWhiteBalanceReceived(_ whiteBalance: Int16, _ tint: Int16, _ presetIndex: Int) {}
	func onOffSpeedFrameRateReceived(_ offSpeedEnabled: Bool, _ frameRate: Int16) {}
	func onApertureFstopReceived(_ fstop: Float, _ stopUnits: LensConfig.ApertureUnits) {}
	func onApertureNormalisedReceived(_ apertureNormalised: Float) {}
	func onShutterAngleReceived(_ shutterAngle: Double) {}
	func onShutterSpeedReceived(_ shutterSpeed: Int32) {}
	func onISOReceived(_ isoIndex: Int) {}
	func onGainReceived(_ gain: Decibels) {}
	func onNDFilterStopReceived(_ stop: Float, _ displayMode: VideoConfig.NDFilterDisplayMode) {}
	func onTransportModeReceived(_ transportMode: CCUPacketTypes.MediaTransportMode) {}
	func setIrisControlEnabled(_ enabled: Bool) {}
	func setShutterControlEnabled(_ enabled: Bool) {}
}

public extension IncomingRecordControlToUIDelegate {
	func setRecording(_ isRecording: Bool) {}
	func onActiveDisksReceived(_ active: [Bool]) {}
	func onTimecodeReceived(_ timecode: String) {}
	func onRecordTimeRemainingReceived(_ remainingRecordTimes: [String]) {}
	func onTimelapseReceived(_ isTimelapseActive: Bool) {}
	func setRecordingError(_ hasRecordingError: Bool) {}
	func setRecordTimeWarning(_ recordTimeWarning: RecordTimeWarning, _ cardIndex: Int) {}
	func showPlaybackView(for clipName: String, at playbackSpeed: Int) {}
	func hidePlaybackView() {}
	func updateClipName(_ clipName: String) {}
}
