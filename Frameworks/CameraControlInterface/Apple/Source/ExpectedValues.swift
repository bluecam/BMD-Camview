/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

/* Holds an array of values that are expected to be received from the camera.
 Call addExpectedValue(T) when sending a value to the camera.
 When receiving a value from the camera call removeUpToExpectedValue(T)

 Used to stop intermediate values (received from the camera) from setting
 widgets while the user is still updating them. */

import Foundation

class ExpectedValues<T: BinaryInteger> {
    typealias ExpectedValueNotReceivedFn = () -> Void
    var m_expectedValueNotReceivedCallback: ExpectedValueNotReceivedFn?
    var m_expectedValues = Array<T>()
    var m_timer: Timer?
    var m_errorTolerance: T

    init(errorTolerance: T) {
        m_errorTolerance = errorTolerance
    }

    // Returns a bool representing whether the expected value was found
    func removeUpToExpectedValue(_ receivedValue: T) -> Bool {
        while m_expectedValues.count > 0 {
            let expectedValue = m_expectedValues.remove(at: 0)

            var errorMargin = expectedValue - receivedValue
            errorMargin = errorMargin < 0 ? errorMargin * -1 : errorMargin
            if errorMargin <= m_errorTolerance {
                return true
            }
        }

        return false
    }

    func addExpectedValue(_ value: T) -> Bool {
        let lastExpectedValue = m_expectedValues.last
        if lastExpectedValue == nil || value != lastExpectedValue! {
            m_expectedValues.append(value)
            setTimer()
            return true
        }

        return false
    }

    func addExpectedValueAllowingDuplicates(_ value: T) {
        m_expectedValues.append(value)
        setTimer()
    }

    @objc func onExpectedValueNotReceived() {
        if m_expectedValues.count != 0 {
            m_expectedValueNotReceivedCallback?()
            clearExpectedValues()
        }
    }

    // If expected value is not received within 500ms, clear expected values, and invoke callback.
    func setTimer() {
        m_timer?.invalidate()
        m_timer = Timer.scheduledTimer(timeInterval: 0.5, target: self, selector: #selector(onExpectedValueNotReceived), userInfo: nil, repeats: false)
    }

    func clearExpectedValues() {
        m_expectedValues.removeAll()
    }
}
