/* -LICENSE-START-
 ** Copyright (c) 2018 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

import UIKit
import BluetoothControl
import Utility
import CCU
import CameraControlInterface

class ISOPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {
    
    
    // IBOutlets
    
    
    @IBOutlet weak var ISOPicker: UIPickerView!
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return isoValues.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return String(isoValues[row])
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // Member variables
    weak var cciOut: OutgoingCameraControlFromUIDelegate?
    
    
    var isoValues = VideoConfig.kISOValues[CameraModel.Unknown]!
    
    
    //==================================================
    //    UIViewController methods
    //==================================================
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.ISOPicker.delegate = self
        self.ISOPicker.dataSource = self
        
        
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        cciOut = appDelegate.cameraControlInterface
    }
    
    //==================================================
    //    IBActions
    //==================================================
    
    
    
    
    
    
    
   
    
    //==================================================
    //    IncomingCameraControlToUIDelegate methods
    //==================================================
    
    
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        let isoIndex: Int = pickerView.selectedRow(inComponent: 0)
        cciOut?.onISOChanged(isoIndex)
        // The parameter named row and component represents what was selected.
    }
    func onCameraSpecificationReceived(_ cameraModel: CameraModel) {
        isoValues = VideoConfig.kISOValues[cameraModel] ?? VideoConfig.kISOValues[CameraModel.Unknown]!
        
    }
    
}
